#map_type: voxel
#map_type: costmap
robot_radius: 0.26  #设置机器人的半径，单位是米。

footprint: [[0.26,0.22],[0.28,0],[0.26,-0.22],[-0.26, -0.22],[-0.26,0.22]]
recovery_behavior_enabled: true

controller_frequency: 10

obstacle_layer:                #   配置障碍物图层
  enabled:        true         #   是否启用该层      true
  combination_method:   1      #只能设置为0或1，用来更新地图上的代价值，一般设置为1
  track_unknown_space:  false  #如果设置为false，那么地图上代价值就只分为致命碰撞和自由区域两种，如果设置为true，那么就分为致命碰撞，自由区域和未知区域三种。
                               #意思是说假如该参数设置为true的话，就意味着地图上的未知区域也会被认为是可以自由移动的区域，这样在进行全局路径规划时，
                               #可以把一些未探索的未知区域也来参与到路径规划，如果你需要这样的话就将该参数设置为false。不过一般情况未探索的区域不应该当作可以自由移动的区域，因此一般将该参数设置为true
  origin_z: 0.0
  z_voxels: 20
  z_resolution: 0.1
  unknown_cost_value: 0
  unknown_threshold: 8
  mark_threshold: 0
  publish_voxel_map: false

  obstacle_range: 6.0     #设置机器人检测障碍物的最大范围，意思是说超过该范围的障碍物，并不进行检测，只有靠近到该范围内才把该障碍物当作影响路径规划和移动的障碍物;
  raytrace_range: 7.0     #在机器人移动过程中，实时清除代价地图上的障碍物的最大范围，更新可自由移动的空间数据。假如设置该值为3米，那么就意味着在3米内的障碍物，
                          #本来开始时是有的，但是本次检测却没有了，那么就需要在代价地图上来更新，将旧障碍物的空间标记为可以自由移动的空间。
  #footprint: [[-0.3,-0.4],[-0.3,1.03],[-0.0,1.03],[0.3, 1.03],[0.3,-0.4]]
  robot_radius: 0.26      #机器人半径
  inflation_radius: 0.25
  #inf_is_valid: true
  max_obstacle_height: 0.40   #传感器读数的最大有效高度，单位为 meters; 通常设置为略高于机器人的实际高度，高度是指包含机械臂打直情况下的最大高度。
  min_obstacle_height: 0.03   ##传感器读数的最大有效高度，单位为 meters
  controller_frequency: 5
  observation_sources: scan  #设置导航中所使用的传感器
  #point_cloud_sensor

  scan: {sensor_frame: base_link,  observation_persistence: 0.0, 
  max_obstacle_height: 0.3, min_obstacle_height: 0.05, data_type: LaserScan, topic: /scan, 
  marking: true,clearing: true}     
  #sensor_frame:激光雷达传感器的坐标系名称;
  #data_type:激光雷达数据类型;
  #topic:该激光雷达发布的话题名;
  #marking:是否可以使用该传感器来标记障碍物;
  #clearing:是否可以使用该传感器来清除障碍物标记为自由空间;

inflation_layer:   #膨胀层，用于在障碍物外标记一层危险区域，在路径规划时需要避开该危险区域
 enabled:              true   #是否启用该层;　　
 cost_scaling_factor:  5.0  # exponential rate at which the obstacle cost drops off (default: 10)
  #膨胀过程中应用到代价值的比例因子，代价地图中到实际障碍物距离在内切圆半径到膨胀半径之间的所有cell可以使用如下公式来计算膨胀代价：
  #exp(-1.0 * cost_scaling_factor * (distance_from_obstacle - inscribed_radius)) * (costmap_2d::INSCRIBED_INFLATED_OBSTACLE - 1)
  #,公式中costmap_2d::INSCRIBED_INFLATED_OBSTACLE目前指定为254，注意： 由于在公式中cost_scaling_factor被乘了一个负数，所以增大比例因子反而会降低代价

 inflation_radius:     0.25  # max. distance from an obstacle at which costs are incurred for planning paths.

static_layer:   #静态地图层，即SLAM中构建的地图层
 enabled: true  #是否启用该地图层

