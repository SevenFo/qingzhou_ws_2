# Plugins
local_costmap:
  plugins:
    - {name: obstacle_layer, type: "costmap_2d::ObstacleLayer"}
    - {name: inflation_layer, type: "costmap_2d::InflationLayer"}
    # - {name: cqu_layer, type: "costmap_2d::CQULayer"}
  global_frame: odom
  robot_base_frame: base_link
  transform_tolerance: 0.5 #default 0.2s

  # Rate parameters

  update_frequency:  10.0 #  
  publish_frequency: 2.0 # default 0.0

  # Map management parameters

  rolling_window: true
  always_send_full_costmap: true 

  # The following parameters can be overwritten by some layers, namely the static map layer.
  # 下面的参数会被静态地图层重写
  width: 5.0
  height: 5.0
  resolution: 0.05
  origin_x: 0.0
  origin_y: 0.0


  obstacle_layer: 
    observation_sources: scan
    scan/topic: /scan
    scan/sensor_frame: base_link
    scan/observation_persistence: 0.0 # How long to keep each sensor reading in seconds. A value of 0.0 will only keep the most recent reading.
    scan/expected_update_rate: 0.2 # default 0.0 acturally rate is 10Hz
    # How often to expect a reading from a sensor in seconds. 
    # A value of 0.0 will allow infinite time between readings. 
    # This parameter is used as a failsafe to keep the navigation stack from commanding the robot
    # when a sensor has failed. 
    # It should be set to a value that is slightly more permissive than the actual rate of the sensor. 
    # For example, if we expect a scan from a laser every 0.05 seconds 
    # we might set this parameter to be 0.1 seconds to give a generous buffer and account 
    # for some amount of system latency.
    
    scan/data_type: LaserScan
    # 全局地图不更新障碍物
    scan/clearing: true # Whether or not this observation should be used to clear out freespace.
    scan/marking: true  # Whether or not this observation should be used to mark obstacles.
    scan/max_obstacle_height: 1.0 # The maximum height in meters of a sensor reading considered valid. This is usually set to be slightly higher than the height of the robot. 
    scan/min_obstacle_height: 0.0 # The minimum height in meters of a sensor reading considered valid. This is usually set to be at ground height, but can be set higher or lower based on the noise model of your sensor.
    scan/obstacle_range: 4.0 # default 2.5 marking设置为false应该不起作用?# The maximum range in meters at which to insert obstacles into the costmap using sensor data.
    scan/raytrace_range: 5.0 # default 3.0 #The maximum range in meters at which to raytrace out obstacles from the map using sensor data.
    scan/inf_is_valid: true # Allows for Inf values in "LaserScan" observation messages. The Inf values are converted to the laser maximum range.

    ## Global Filtering Parameters
    max_obstacle_height: 1.0
    obstacle_range: 2.5
    raytrace_range: 3.0

    # 好像不怎么关键，因为5x5的范围完全在雷达的范围之内
    ## ObstacleCostmapPlugin (These parameters are used by the ObstacleCostmapPlugin.
    track_unknown_space: true # If false, each pixel has one of 2 states: lethal obstacle or free. 
                        # If true, each pixel has one of 3 states: lethal obstacle, free, or unknown.
    footprint_clearing_enabled: true # If true, the robot footprint will clear (mark as free) the space in which it travels.
    combination_method: 1
    # Changes the behaviour how the obstacle_layer handles incoming data from layers beyond it. 
    # Possible values are "Overwrite" (0), "Maximum" (1) and "Nothing" (99). 
    # "Overwrite" simply overwrites the data below, i.e. they are not used. 
    # "Maximum" is what you want most of the times. 
    #   It takes the maximum o**********

  # "Lethal" cost means that there is an actual (workspace) obstacle in a cell. So if the robot's center were in that cell, the robot would obviously be in collision.
  # "Inscribed" cost means that a cell is less than the robot's inscribed radius away from an actual obstacle. So the robot is certainly in collision with some obstacle if the robot center is in a cell that is at or above the inscribed cost.
  # "Possibly circumscribed" cost is similar to "inscribed", but using the robot's circumscribed radius as cutoff distance. Thus, if the robot center lies in a cell at or above this value, then it depends on the orientation of the robot whether it collides with an obstacle or not. We use the term "possibly" because it might be that it is not really an obstacle cell, but some user-preference, that put that particular cost value into the map. For example, if a user wants to express that a robot should attempt to avoid a particular area of a building, they may inset their own costs into the costmap for that region independent of any obstacles. Important Note: Navigation's inflation layer does not enforce this 128 cost possibly-inscribed boundary, however, it is relatively easy to acquire the cost at this distance for use in collision detection calculations.

  # "Freespace" cost is assumed to be zero, and it means that there is nothing that should keep the robot from going there.
  # "Unknown" cost means there is no information about a given cell. The user of the costmap can interpret this as they see fit.
  # All other costs are assigned a value between "Freespace" and "Possibly circumscribed" depending on their distance from a "Lethal" cell and the decay function provided by the user.
  # The rationale behind these definitions is that we leave it up to planner implementations to care or not about the exact footprint, yet give them enough information that they can incur the cost of tracing out the footprint only in situations where the orientation actually matters.
  inflation_layer: 
    inflation_radius: 0.2 #default 0.55 # The radius in meters to which the map inflates obstacle cost values.
    cost_scaling_factor: 1.0 #default 10
    # A scaling factor to apply to cost values during inflation.
    # The cost function is computed as follows for all cells in the costmap further than the 
    # inscribed radius distance and closer than the inflation radius distance away from 
    # an actual obstacle: 
    # exp(-1.0 * cost_scaling_factor * (distance_from_obstacle - inscribed_radius)) * (253), 
    # where costmap_2d::INSCRIBED_INFLATED_OBSTACLE is currently 254. 
    # NOTE: since the cost_scaling_factor is multiplied by a negative in the formula, 
    # increasing the factor will decrease the resulting cost values.
