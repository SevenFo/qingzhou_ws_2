# 调大了inflation dist、costmap_obstacles_behind_robot_dist，调小了min_obstacle_dist

TebLocalPlannerROS:

  odom_topic: odom
  map_frame: map
    
 # Trajectory
  
  teb_autosize: True   #优化期间允许改变轨迹的时域长度
  dt_ref: 0.3          #局部路径规划的解析度
  dt_hysteresis: 0.1   #允许改变的时域解析度的浮动范围， 一般为 dt_ref 的 10% 左右;bal
  max_samples: 500
  global_plan_overwrite_orientation: False  #覆盖全局路径中局部路径点的朝向，有些全局规划者在开始和全局目标之间没有考虑局部子目标的方向，因此自动确定
  allow_init_with_backwards_motion:  False   #允许在开始时想后退来执行轨迹，如果为true，则在目标在本地成本图中落后于起点的情况下，可以使用向后运动来初始化基础轨迹
  max_global_plan_lookahead_dist: 1.0  #  used 3.0  #考虑优化的全局计划子集的最大长度（累积欧几里得距离）（如果为0或负数：禁用；长度也受本地Costmap大小的限制）
  global_plan_viapoint_sep: 0.5
  # global_plan_prune_distance: 1
  exact_arc_length: False         #如果为真，规划器在速度、加速度和转弯率计算中使用精确的弧长[->增加的CPU时间]，否则使用欧几里德近似
  feasibility_check_no_poses: 2   #检测位姿可到达的时间间隔
  publish_feedback: False         #发布包含完整轨迹和活动障碍物列表的规划器反馈
      
 # Robot
  max_vel_y: 0.0
  max_vel_x: 0.55
  max_vel_x_backwards: 0.2 #最大倒车速度。将此速度设置为0或者负数将导致错误。禁止倒车应在penalty部分将前向行驶的权重设置得极高。
  max_vel_theta: 0.42
  acc_lim_x: 100
  acc_lim_theta: 100


  
  # ********************** Carlike robot parameters ********************
  min_turning_radius: 0.7        # 0.76 车类机器人的最小转弯半径，小型机器人的最小转弯半径（差速驱动机器人：零）Min turning radius of the carlike robot (compute value using a model or adjust with rqt_reconfigure manually)
  wheelbase: 0.3                 # 驱动轴和转向轴之间的距离（仅适用于启用了“Cmd_angle_而不是_rotvel”的Carlike机器人）；Wheelbase of our robot  前后轮距离。
  cmd_angle_instead_rotvel: True #将收到的角速度消息转换为操作上的角度变化。stage simulator takes the angle instead of the rotvel as input (twist message)
  # ********************************************************************

  footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
    type: "polygon"
    radius: 0.2 # for type "circular"
    line_start: [-0.2, 0.0] # for type "line"
    line_end: [0.2, 0.0] # for type "line"
    front_offset: 0.2 # for type "two_circles"
    front_radius: 0.2 # for type "two_circles"
    rear_offset: 0.2 # for type "two_circles"
    rear_radius: 0.2 # for type "two_circles"
    vertices: [ [0.25,0.20],[0.27,0],[0.25,-0.20],[-0.25, -0.20],[-0.25,0.20] ] # for type "polygon"

 # GoalTolerance
      
  xy_goal_tolerance: 0.5  #used 0.4  目标 xy 偏移容忍度，到目标位置的最终欧几里得距离
  yaw_goal_tolerance: 2  #used  0.2  目标 角度 偏移容忍度
  free_goal_vel: False     #允许机器人以最大速度驶向目的地， 出于计划目的，允许机器人的速度不为零（机器人可以以最大速度到达目标）
  # complete_global_plan: True
    
 # Obstacles
  inflation_dist: 0.0   # used 0.3 #障碍物膨胀距离，惩罚成本不为零的障碍物周围的缓冲区（应大于min_obstacle_dist才能生效）
  min_obstacle_dist: 0.1     #  used 0.24  #和障碍物最小距离，米为单位。
  include_costmap_obstacles: True  #这个必须设置成true才能规避实时探测到的，建图时不存在的障碍物
  costmap_obstacles_behind_robot_dist: 1.0  #used  1.0  限制在机器人后面规划时考虑到的占用的本地成本图障碍(指定距离，单位为米)
  obstacle_poses_affected: 5   #used 20   障碍物位置与轨迹上最接近的姿态相连，以减少计算量，但同时也考虑了许多相邻的障碍物

  dynamic_obstacle_inflation_dist: 0.1  #used 1  动态障碍物的膨胀范围，动态障碍物的预测位置周围的缓冲区的惩罚成本非零（应大于min_obstacle_dist才能生效）
  include_dynamic_obstacles: False       #是否将动态障碍物预测为速度模型，指定是否动态障碍物的运动应该被一个恒速模型预测(这也改变了同伦类搜索)。如果为false，则认为所有的障碍都是静态的。

  

## Costmap converter plugin   
  costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSMCCH"
  # costmap_converter_plugin: "costmap_converter::CostmapToLinesDBSRANSAC"
  # costmap_converter_plugin: "costmap_converter::CostmapToLinesDBSMCCH"
  # costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSConcaveHull"
  # costmap_converter_plugin: "" # deactivate plugin
  # costmap_converter_spin_thread: True
  # costmap_converter_rate: 5_area_length_scale: 1.0
  # costmap_converter_plugin: ""
  costmap_converter_spin_thread: True
  costmap_converter_rate: 5
  costmap_converter/CostmapToLinesDBSRANSAC:
    cluster_max_distance: 0.4
    cluster_min_pts: 2
    ransac_inlier_distance: 0.15
    ransac_min_inliers: 10
    ransac_no_iterations: 2000
    ransac_remainig_outliers: 3
    ransac_convert_outlier_pts: True
    ransac_filter_remaining_outlier_pts: False
    convex_hull_min_pt_separation: 0.1

  # Optimization
  no_inner_iterations: 5   #被外循环调用后内循环执行优化次数
  no_outer_iterations: 4   #执行的外循环的优化次数
  optimization_activate: True  #激活优化
  optimization_verbose: False  #打印优化过程详情
  penalty_epsilon: 0.15     #对于硬约束近似，在惩罚函数中添加安全范围
  obstacle_cost_exponent: 4
  weight_max_vel_x: 2
  weight_max_vel_theta: 2
  weight_acc_lim_x: 1    # 1
  weight_acc_lim_theta: 1   #1
  weight_kinematics_nh: 1000    #迫使机器人只选择前进的方向，也就是权重越大，倒车惩罚越大。(0~1000)
  weight_kinematics_forward_drive: 1000    #优化过程中，迫使机器人只选择前进方向，差速轮适用
  weight_kinematics_turning_radius: 3   #机器人最小转向半径的权重，越大则越容易达到最小转向半径的情况。 (0~1000)
  
  weight_optimaltime: 1 # must be > 0
  #这个参数是最优时间权重，如果大了，那么车会在直道上快速加速，并且路径规划的也会切内道，这是DWA算法只能靠膨胀缩小来实现的。
  #这个参数越小，整个过程的车速会越稳定。我试过了0.5和2.5这两个值，差距还是蛮明显的，各位可以自己试试看体会一下，范围同样是0~1000。
  
  weight_shortest_path: 10
  weight_obstacle: 45   #优化过程中，和障碍物最小距离的权重
  weight_inflation: 0.1  #优化过程中， 膨胀区的权重
  weight_dynamic_obstacle: 50 # not in use yet 优化过程中，和动态障碍物最小距离的权重
  weight_dynamic_obstacle_inflation: 0.2  #优化过程中，和动态障碍物膨胀区的权重
  weight_viapoint: 10   #优化过程中，和全局路径采样点距离的权重
  weight_adapt_factor: 2   #在每次外部TEB迭代中，一些特殊权重（当前为“ weight_obstacle”）会以此因子重复缩放（weight_new：weight_old * factor）； 迭代地增加权重而不是设置较大的先验值会导致底层优化问题的更好的数值条件。

  # Homotopy Class Planner

  enable_homotopy_class_planning: True
  enable_multithreading: false    #允许多线程并行处理
  max_number_classes: 4          #允许的线程数
  selection_cost_hysteresis: 1.0 #指定新候选人必须有多少轨迹成本 先前选择的轨迹以进行选择（如果new_cost <old_cost * factor则选择）
  selection_prefer_initial_plan: 0.95  #为初始计划的等价类中的轨迹指定在区间(0,1)中的成本降低。
  selection_obst_cost_scale: 1.0  #为了选择“最佳”候选人，障碍成本项的额外缩放(new_obst_cost: obst_cost*factor)
  selection_alternative_time_cost: False

  roadmap_graph_no_samples: 15
  roadmap_graph_area_width: 5
  roadmap_graph_area_length_scale: 1.0
  h_signature_prescaler: 0.5
  h_signature_threshold: 0.1
  obstacle_heading_threshold: 0.45
  switching_blocking_period: 0.0
  viapoints_all_candidates: False
  delete_detours_backwards: True
  max_ratio_detours_duration_best_duration: 3.0
  visualize_hc_graph: False
  visualize_with_time_as_z_axis_scale: False


#  Recovery

  shrink_horizon_backup: True
  shrink_horizon_min_duration: 10
  oscillation_recovery: True
  oscillation_v_eps: 0.1
  oscillation_omega_eps: 0.1
  oscillation_recovery_min_duration: 10
  oscillation_filter_duration: 10